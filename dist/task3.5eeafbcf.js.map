{"version":3,"sources":["js/task3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","Promise","resolve","reject","delay","setTimeout","canProcess","logSuccess","id","time","console","log","logError","warn","amount","then","catch"],"mappings":"AACA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC9C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD,CAFD;;AAIA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAcC,SAAd,EAAyBC,OAAzB,EAAqC;AAEzD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAMC,KAAK,GAAGb,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC;AACAc,IAAAA,UAAU,CAAC,YAAM;AACb,UAAMC,UAAU,GAAGZ,IAAI,CAACE,MAAL,KAAgB,GAAnC;AACA,UAAMW,UAAU,IAAIT,WAAW,CAACU,EAAZ,EAAgBJ,KAApB,CAAhB;AACA,UAAMI,EAAE,GAAGV,WAAW,CAACU,EAAvB;AACA,UAAMC,IAAI,GAAGL,KAAb;;AACA,UAAIE,UAAJ,EAAgB;AACZJ,QAAAA,OAAO,CAAC;AAAEM,UAAAA,EAAE,EAAFA,EAAF;AAAMC,UAAAA,IAAI,EAAJA;AAAN,SAAD,CAAP;AACH,OAFD,MAEO;AACHN,QAAAA,MAAM,CAACK,EAAD,CAAN;AACH;AAEJ,KAXS,EAWPJ,KAXO,CAAV;AAYH,GAdM,CAAP;AAeH,CAjBD;;AAoBA,IAAMG,UAAU,GAAG,SAAbA,UAAa,OAAgB;AAAA,MAAdC,EAAc,QAAdA,EAAc;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACjCC,EAAAA,OAAO,CAACC,GAAR,uBAA2BH,EAA3B,2BAA8CC,IAA9C;AACD,CAFD;;AAIA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAJ,EAAE,EAAI;AACrBE,EAAAA,OAAO,CAACG,IAAR,wCAA6CL,EAA7C;AACD,CAFD,EAKA;AACA;AACA;AACA;;;AAIAX,eAAe,CAAC;AAAEW,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQR,UADR,EAEGS,KAFH,CAESJ,QAFT;AAIAf,eAAe,CAAC;AAAEW,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQR,UADR,EAEGS,KAFH,CAESJ,QAFT;AAIAf,eAAe,CAAC;AAAEW,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQR,UADR,EAEGS,KAFH,CAESJ,QAFT;AAIAf,eAAe,CAAC;AAAEW,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQR,UADR,EAEGS,KAFH,CAESJ,QAFT","file":"task3.5eeafbcf.js","sourceRoot":"../src","sourcesContent":["\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n   \n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            const logSuccess = (transaction.id, delay);\n            const id = transaction.id  \n            const time = delay\n            if (canProcess) {\n                resolve({ id, time });\n            } else {\n                reject(id);\n            }          \n                    \n        }, delay);\n    });\n};\n      \n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}